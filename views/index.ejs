<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="/style.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <title>Dashboard</title>
</head>
<body>
    <h1>Dashboard</h1>
    
    <!-- Screenings Table -->
    <h2>Child Facility Screenings</h2>
    <% if (screenings && screenings.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <% for (const key in screenings[0]) { %>
                        <th><%= key %></th>
                    <% } %>
                </tr>
            </thead>
            <tbody>
                <% for (const obj of screenings) { %>
                    <tr>
                        <% for (const key in obj) { %>
                            <td><%= obj[key] %></td>
                        <% } %>
                    </tr>
                <% } %>
            </tbody>
        </table>
    <% } else { %>
        <p>No screenings data available.</p>
    <% } %>

    <!-- Child Follow-Up Table -->
    <h2>Child Facility Follow-Up</h2>
    <% if (cFollowUp && cFollowUp.length > 0) { %>
        <table>
            <thead>
                <tr>
                    <% for (const key in cFollowUp[0]) { %>
                        <th><%= key %></th>
                    <% } %>
                </tr>
            </thead>
            <tbody>
                <% for (const obj of cFollowUp) { %>
                    <tr>
                        <% for (const key in obj) { %>
                            <td><%= obj[key] %></td>
                        <% } %>
                    </tr>
                <% } %>
            </tbody>
        </table>
    <% } else { %>
        <p>No child follow-up data available.</p>
    <% } %>

    <!-- Children Under 5 Section -->
    <h2>Children Under Age 5</h2>
    <div class="total-count">
        Total Count: <span id="totalCountDisplay"><%= totalUnderFive%></span>
    </div>
    <div class="chart-container">
        <canvas id="childAgeChart"></canvas>
    </div>
    
    <h2>Registration by Districts</h2>
    <div class="chart-container">
        <canvas id="regByDistChart"></canvas>
    </div>
    
    <h1>Total screening data of children</h1>
    <div><%= screeningStats.totalEntries%></div>

    <h2>Male</h2>
    <div><%= screeningStats.malePercentage%>%</div>

    <h2>Female</h2>
    <div><%= screeningStats.femalePercentage%>%</div>

    <!-- Pass the data to JavaScript using a hidden input -->
    <input type="hidden" id="totalChildren23" value="<%= ch23 %>">
    <input type="hidden" id="totalChildren24" value="<%= ch24 %>">
    <input type="hidden" id="totalChildren25" value="<%= ch25 %>">
    <input type="hidden" id="totalChildrenByDistrict" value="<%= JSON.stringify(CDistricts) %>">

    

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const totalCount23 = parseInt(document.getElementById('totalChildren23').value) || 0;
            const totalCount24 = parseInt(document.getElementById('totalChildren24').value) || 0;
            const totalCount25 = parseInt(document.getElementById('totalChildren25').value) || 0;
          
            
            const ctx = document.getElementById('childAgeChart');
            new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: ['2023','2024','2025'],
                    datasets: [{
                        label: 'Total Count',
                        data: [totalCount23, totalCount24, totalCount25],
                        backgroundColor: 'rgba(54, 162, 235, 0.7)',
                        borderColor: 'rgba(54, 162, 235, 1)',
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 1
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Total Assesment by Year Children Under 5y',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });

            const districtsData = JSON.parse(document.getElementById('totalChildrenByDistrict').value || '[]');
            const distCtx = document.getElementById('regByDistChart');
            
            new Chart(distCtx, {
                type: 'bar',
                data: {
                    labels: districtsData.map(d => d.district),
                    datasets: [{
                        label: 'Total Count',
                        data: districtsData.map(d => d.count),
                        backgroundColor: 'rgba(125, 245, 169, 0.7)',
                        borderColor: 'rgba(125, 245, 169, 1)',
                        borderWidth: 0
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true,
                            ticks: {
                                precision: 1
                            }
                        }
                    },
                    plugins: {
                        title: {
                            display: true,
                            text: 'Total Registration by Districts',
                            font: {
                                size: 16
                            }
                        }
                    }
                }
            });
            });

    // Connect to Socket.IO
    const socket = io();
    
    // Store chart references for updating
    let childAgeChart;
    let regByDistChart;
    
    // Listen for updates from the server
    socket.on('data-update', function(data) {
        console.log('Received new data from server');
        
        // Update the children by year chart
        if (data.childrenByYear) {
            updateChildrenByYearChart(data.childrenByYear);
        }
        
        // Update districts chart
        if (data.districts) {
            updateDistrictsChart(data.districts);
        }
        
        // Update screening stats
        if (data.screeningStats) {
            updateScreeningStats(data.screeningStats);
        }
        
        // Update tables
        if (data.screenings) {
            updateTableData('Child Facility Screenings', data.screenings);
        }
        
        if (data.cFollowUp) {
            updateTableData('Child Facility Follow-Up', data.cFollowUp);
        }
    });
    
    // Save chart references when initialized
    document.addEventListener('DOMContentLoaded', function() {
        // Get your chart references after they're created
        const charts = document.querySelectorAll('canvas');
        for (let chart of charts) {
            if (chart.id === 'childAgeChart') {
                childAgeChart = Chart.getChart(chart);
            } else if (chart.id === 'regByDistChart') {
                regByDistChart = Chart.getChart(chart);
            }
        }
    });
    
    // Function to update the children by year chart
    function updateChildrenByYearChart(data) {
        if (!childAgeChart) return;
        
        // Update total count display
        const totalCountDisplay = document.getElementById('totalCountDisplay');
        if (totalCountDisplay) {
            totalCountDisplay.textContent = data.totalUnderFive;
        }
        
        // Update chart data
        childAgeChart.data.datasets[0].data = [
            data.childByYear2023,
            data.childByYear2024,
            data.childByYear2025
        ];
        
        childAgeChart.update();
    }
    
    // Function to update the districts chart
    function updateDistrictsChart(districts) {
        if (!regByDistChart || !districts) return;
        
        regByDistChart.data.labels = districts.map(d => d.district);
        regByDistChart.data.datasets[0].data = districts.map(d => d.count);
        regByDistChart.update();
    }
    
    // Function to update screening stats
    function updateScreeningStats(stats) {
        if (!stats) return;
        
        // Find elements by nearby headings
        const elements = document.querySelectorAll('h1, h2');
        elements.forEach(element => {
            if (element.textContent.includes('Total screening data of children') && element.nextElementSibling) {
                element.nextElementSibling.textContent = stats.totalEntries;
            }
            if (element.textContent.includes('Male') && element.nextElementSibling) {
                element.nextElementSibling.textContent = stats.malePercentage + '%';
            }
            if (element.textContent.includes('Female') && element.nextElementSibling) {
                element.nextElementSibling.textContent = stats.femalePercentage + '%';
            }
        });
    }
    
    // Function to update table data
    function updateTableData(tableTitle, data) {
        if (!data || data.length === 0) return;
        
        // Find the heading with the given text
        const headings = document.querySelectorAll('h2');
        let targetHeading = null;
        
        for (let heading of headings) {
            if (heading.textContent.includes(tableTitle)) {
                targetHeading = heading;
                break;
            }
        }
        
        if (!targetHeading) return;
        
        // Find the next table element
        let table = targetHeading.nextElementSibling;
        while (table && table.tagName !== 'TABLE') {
            table = table.nextElementSibling;
        }
        
        if (!table) return;
        
        // Get the table body
        const tbody = table.querySelector('tbody');
        if (!tbody) return;
        
        // Clear existing rows
        tbody.innerHTML = '';
        
        // Add new rows
        data.forEach(item => {
            const row = document.createElement('tr');
            
            for (const key in item) {
                const cell = document.createElement('td');
                cell.textContent = item[key];
                row.appendChild(cell);
            }
            
            tbody.appendChild(row);
        });
    }
        </script>
    
     
</body>
</html>